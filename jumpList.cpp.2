#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <time.h>

class node
{
public:
	node* up;
	node* front;
	node* down;
	node* back;

	int value;
	int level;
	int maxLevel;

	node(int value, int level, int maxLevel,  node* back = NULL, node* front = NULL, node* up = NULL, node* down = NULL)
	{
		this->value = value;
		this->level = level;
		this->maxLevel = maxLevel;
		this->up = up;
		this->front = front;
		this->down = down;
		this->back = back;
	}
	node(){}

};

class jumpList:public node
{
	node* root;
	int maxLvlOfList;
	jumpList()
	{
	}
	jumpList(int maxLvlOfList)
	{
		this->maxLvlOfList = maxLvlOfList;
		root = NULL;
	}

	bool isEmpty()
	{
		if(root == NULL) return true;
		return false;
	}

	int randomLevel(int maxLvl)
	{
		int random = 1;
		while(rand()%2 ||random != maxLvl)
		{
			random++;
		}
		return random;
	}

	void add(int value)
	{
		if(isEmpty())
		{
			int temp = randomLevel(maxLvlOfList);
			root = new node(value, 1, temp);
			node* ptr = root;
			for(int i = 0; i < temp; i++)
			{
				ptr->up = new node(value, (i+2), temp);
				ptr->up->down = ptr->up;
				ptr = ptr->up;
			}
		}
		else
		{
			node* ptr = searchWhereToAdd(value, root);
			if(ptr->front == NULL)
			{
				int temp = randomLevel(maxLvlOfList);
				while(ptr->down != NULL)
				{
					ptr = ptr->down;
				}
				ptr->front = new node(value, 1, temp, ptr);
				ptr = ptr->front;
				node* ptr2 = ptr;
				for(int i = 0; i < temp; i++)
				{
					while(ptr->back != NULL ||ptr->maxLevel < temp)
					{
						ptr = ptr->back;
					}
					if(ptr->back == NULL)
						ptr = NULL;
					else
						while(ptr->level != i)
						{
							ptr=ptr->up;
						}
					ptr2 ->up = new node(value, i+2, temp, ptr);
					ptr->front = ptr2->up;
				}
			}///// HERE ///
			else
			{
				int temp = randomLevel(maxLvlOfList);
				node* ptr2 = ptr;
				for(int i =0; i<temp ; i++)
				{
					while((i+2) != ptr->front->level || ptr->up == NULL)
					{
						ptr = ptr->up;
					}
					ptr2->front = new node(value, (i+2), temp, ptr->front, ptr);
					ptr2->front->back = ptr2->front;

				}

			}
		}
	}

	node* searchWhereToAdd(int value, node* temp, bool flag = false) // recursif
	{
		node* ptr = temp;
		while(ptr->up != NULL || flag != true)
		{
			ptr = ptr->up;
		}
		if(ptr->front != NULL)
		{
			if((ptr->down != NULL ) || (ptr->value <= ptr->front->value))
				searchWhereToAdd(value, ptr->down, true);
			else
			{
				if(ptr->value > ptr->front->value)
					searchWhereToAdd(value, ptr->front);
		}
		return ptr;
	}

	bool search(int value, node* temp, bool flag = false) // recursif
	{
		node* ptr = temp;
		while(ptr->up != NULL || flag != true)
		{
			ptr = ptr->up;
			
		}
		if(ptr->value == value)
			return true;
		else
		{
			
			if((ptr->down != NULL ) || (ptr->value < ptr->front->value))
				search(value, ptr->down, true);
			else
			{
				if((ptr->front != NULL) || (ptr->value > ptr->front->value))
					search(value, ptr->front);
			}
			return false;
		}
		
	}

};

int main()
{
	srand(time(NULL));
	return 0;
}
